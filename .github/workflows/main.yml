# This is a workflow to build a package code push.
name: Package executable with Pyinstaller - Windows

# Controls when the workflow will run
on: push
        
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Runs https://github.com/JackMcKew/pyinstaller-action-windows
      - name: Package Windows Application
        uses: JackMcKew/pyinstaller-action-windows@main
        with:
          path: .
          spec: build-on-win.spec

      # Install dependencies 
      - name: Install WxPython
        run: pip install -U -f https://extras.wxpython.org/wxPython4/extras/linux/gtk3/ubuntu-20.04 wxPython
      - name: Install GTK 3
        run: sudo apt install libgtk-3-0

      # Runs https://github.com/marketplace/actions/pyinstaller-linux
      - name: Package Linux Application
        uses: JackMcKew/pyinstaller-action-linux@main
        with:
          path: .
          spec: build-on-linux.spec

      # Upload artifcats Windows
      - uses: actions/upload-artifact@v2
        id: upload_artifacts_windows
        with:
          name: PixelFlasher.exe
          path: dist/windows

      # Upload artifcats linux
      - uses: actions/upload-artifact@v2
        id: upload_artifacts_linux
        with:
          name: PixelFlasher
          path: dist/linux

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: true
      
      - name: Upload Windows Release Asset
        id: upload-windows-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./dist/windows/PixelFlasher.exe
          asset_name: PixelFlasher.exe
          asset_content_type: application/zip

      - name: Upload Linux Release Asset
        id: upload-linux-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ./dist/linux/PixelFlasher
          asset_name: PixelFlasher
          asset_content_type: application/zip
